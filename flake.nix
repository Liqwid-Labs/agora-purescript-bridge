# Based on https://github.com/Plutonomicon/cardano-transaction-lib/blob/b836cc1129963e263e8e7af70eebb86f03986c28/doc/ctl-as-dependency.md
{
  description = "agora-purescript-bridge";

  inputs = {
    flake-compat = {
      url = "github:edolstra/flake-compat";
      flake = false;
    };
    cardano-transaction-lib = {
      type = "github";
      owner = "Plutonomicon";
      repo = "cardano-transaction-lib";
      # NOTE
      # This should match the same revision as the one in your `packages.dhall` to ensure
      # the greatest compatibility
      # https://github.com/Plutonomicon/cardano-transaction-lib/pull/1053
      rev = "97bdb76889fa1afdd004ae232dbf9f5a8e64b68b";
    };
    nixpkgs.follows = "cardano-transaction-lib/nixpkgs";
  };

  outputs = { self, nixpkgs, cardano-transaction-lib, ... }:
    let

      # supported systems
      defaultSystems =
        [ "x86_64-linux" "x86_64-darwin" "aarch64-linux" ];
      perSystem = nixpkgs.lib.genAttrs defaultSystems;

      # generate `pkgs` with the CTL overlay applied. This gives you access to
      # various additional packages, using the same versions of CTL, including:
      #   - all of `easy-purescript-nix`
      nixpkgsFor = system: import nixpkgs {
        inherit system;
        overlays = [
          cardano-transaction-lib.overlays.purescript
          cardano-transaction-lib.overlays.ctl-server
          cardano-transaction-lib.overlays.runtime
        ];
      };

      # The overlay also include several tools for generating a PS project
      # using the same approach as CTL, under `purescriptProject`
      psProjectFor = system:
        let
          pkgs = nixpkgsFor system;
          # This is the root of the project. Typically, this would be `self`
          # for flakes-based projects
          #
          # You may also want to filter this to avoid bloat or unecessary
          # rebuilds when copying the source into derivations
          src = self;
        in
        pkgs.purescriptProject {
          inherit pkgs src;
          packageJson = ./package.json;
          packageLock = ./package-lock.json;

          # Warnings will not be treated as errors.
          strictComp = false;

          # Will be used to generate derivation name
          projectName = "agora-purescript-bridge";

          # Optional arg to override the version of `nodejs` used, defaulting to
          # the version used by CTL itself. This will be used throughout
          # `purescriptProject`
          #
          # Note that the version of `purs` is not configurable, as CTL
          # will currently break with any other version (it uses 0.14.5
          # internally)
          nodejs = pkgs.nodejs-14_x;

          # Also optional; the path to the packages generated by `spago2nix`,
          # defaulting to:
          spagoPackages = ./spago-packages.nix;

          # The optional `shell` lets you configure the `devShell` that is
          # generated by `purescriptProject`
          #
          # All of the attrs below are entirely optional (shown here with
          # their default values)
          shell = {
            # Extra packages to include in the shell environment. By default
            # a common version of `nodejs`, `purs`, `spago`, and more are
            # included
            packages = [
              pkgs.fd
              pkgs.gnumake
            ];

            # This will be appended to the `shellHook` that runs. By default,
            # the `shellHook` loads generated `node_modules` and exports a
            # modified `NODE_PATH` and `PATH`
            shellHook = "";

            # The same as `pkgs.mkShell.inputsFrom`
            inputsFrom = [ ];

            # Which formatter to be made available, `purty` is another option
            formatter = "purs-tidy";

            # If `purescript-language-server` should be included in the shell
            pursls = true;
          };
        };
    in
    {
      checks = perSystem (system:
        let pkgs = nixpkgsFor system;
        in
        {
          agora-purescript-bridge = (psProjectFor system).runPursTest {
            sources = [ "src" "test" ];
          };

          formatting-check = pkgs.runCommand "formatting-check"
            {
              nativeBuildInputs = [ pkgs.easy-ps.purs-tidy pkgs.fd ];
            } ''
            cd ${self}
            purs-tidy check $(fd -epurs)
            touch $out
          '';
        });

      check = perSystem (system:
        (nixpkgsFor system).runCommand "combined-test"
          {
            checksss = builtins.attrValues self.checks.${system};
          } ''
          echo $checksss
          touch $out
        '');

      devShell = perSystem (system: (psProjectFor system).devShell);

      hydraJobs.x86_64-linux = self.checks.x86_64-linux;
    };
}

-- File auto generated by purescript-bridge! --
module Agora.Governor where

import Prelude

import Agora.Types.AssetClass (AssetClass)
import Agora.Proposal (ProposalId, ProposalThresholds)
import Agora.SafeMoney (GTTag)
import Contract.PlutusData
  ( class FromData
  , class ToData
  , genericFromData
  , genericToData
  )
import Ctl.Internal.Plutus.Types.DataSchema
  ( class HasPlutusSchema
  , type (:+)
  , type (:=)
  , type (@@)
  , I
  , PNil
  )
import Ctl.Internal.TypeLevel.Nat (Z)
import Ctl.Internal.Types.PlutusData (PlutusData(Integer))
import Ctl.Internal.Types.Transaction (TransactionInput)
import Data.BigInt (BigInt)
import Data.BigInt as BigInt
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Prism', prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tagged (Tagged)
import ProposalTime (MaxTimeRangeWidth, ProposalTimingConfig)

newtype GovernorDatum = GovernorDatum
  { proposalThresholds :: ProposalThresholds
  , nextProposalId :: ProposalId
  , proposalTimings :: ProposalTimingConfig
  , createProposalTimeRangeMaxWidth :: MaxTimeRangeWidth
  , maximumCreatedProposalsPerStake :: BigInt
  }

instance
  HasPlutusSchema GovernorDatum
    ( "GovernorDatum"
        :=
          ( "proposalThresholds" := I ProposalThresholds
              :+ "nextProposalId"
              := I ProposalId
              :+ "proposalTimings"
              := I ProposalTimingConfig
              :+ "createProposalTimeRangeMaxWidth"
              := I MaxTimeRangeWidth
              :+ "maximumCreatedProposalsPerStake"
              := I BigInt
              :+ PNil
          )
        @@ Z
        :+ PNil
    )

instance ToData GovernorDatum where
  toData = genericToData

instance FromData GovernorDatum where
  fromData = genericFromData

derive instance Generic GovernorDatum _

derive instance Newtype GovernorDatum _

derive newtype instance Eq GovernorDatum

derive newtype instance Show GovernorDatum

--------------------------------------------------------------------------------

_GovernorDatum
  :: Iso' GovernorDatum
       { proposalThresholds :: ProposalThresholds
       , nextProposalId :: ProposalId
       , proposalTimings :: ProposalTimingConfig
       , createProposalTimeRangeMaxWidth :: MaxTimeRangeWidth
       , maximumCreatedProposalsPerStake :: BigInt
       }
_GovernorDatum = _Newtype

--------------------------------------------------------------------------------

data GovernorRedeemer
  = CreateProposal
  | MintGATs
  | MutateGovernor

instance ToData GovernorRedeemer where
  toData CreateProposal = Integer $ BigInt.fromInt 0
  toData MintGATs = Integer $ BigInt.fromInt 1
  toData MutateGovernor = Integer $ BigInt.fromInt 2

instance FromData GovernorRedeemer where
  fromData :: PlutusData -> Maybe GovernorRedeemer
  fromData x = case x of
    (Integer y) ->
      if y == BigInt.fromInt 0 then Just CreateProposal
      else if y == BigInt.fromInt 1 then Just MintGATs
      else if y == BigInt.fromInt 2 then Just MutateGovernor
      else Nothing
    _ -> Nothing

derive instance Eq GovernorRedeemer
derive instance Ord GovernorRedeemer
derive instance Generic GovernorRedeemer _

instance Show GovernorRedeemer where
  show = genericShow

instance Enum GovernorRedeemer where
  succ = genericSucc
  pred = genericPred

instance Bounded GovernorRedeemer where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_CreateProposal :: Prism' GovernorRedeemer Unit
_CreateProposal = prism' (const CreateProposal) case _ of
  CreateProposal -> Just unit
  _ -> Nothing

_MintGATs :: Prism' GovernorRedeemer Unit
_MintGATs = prism' (const MintGATs) case _ of
  MintGATs -> Just unit
  _ -> Nothing

_MutateGovernor :: Prism' GovernorRedeemer Unit
_MutateGovernor = prism' (const MutateGovernor) case _ of
  MutateGovernor -> Just unit
  _ -> Nothing

--------------------------------------------------------------------------------

newtype Governor = Governor
  { gstOutRef :: TransactionInput
  , gtClassRef :: Tagged GTTag AssetClass
  , maximumCosigners :: BigInt
  }

derive instance Eq Governor
derive instance Ord Governor
derive instance Generic Governor _
derive instance Newtype Governor _

--------------------------------------------------------------------------------

_Governor
  :: Iso' Governor
       { gstOutRef :: TransactionInput
       , gtClassRef :: Tagged GTTag AssetClass
       , maximumCosigners :: BigInt
       }
_Governor = _Newtype

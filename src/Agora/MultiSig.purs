-- File auto generated by purescript-bridge! --
module Agora.MultiSig where

import Prelude

import Aeson (class DecodeAeson, class EncodeAeson, decodeAeson, encodeAeson)
import Contract.PlutusData (class FromData, class ToData, genericFromData, genericToData)
import Contract.Prelude (wrap)
import Ctl.Internal.Plutus.Types.DataSchema (class HasPlutusSchema, type (:+), type (:=), type (@@), I, PNil)
import Ctl.Internal.TypeLevel.Nat (Z)
import Ctl.Internal.Types.PubKeyHash (PubKeyHash)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Newtype (class Newtype)

newtype MultiSig = MultiSig
  { keys :: Array PubKeyHash
  , minSigs :: BigInt
  }

instance
  HasPlutusSchema MultiSig
    ( "MultiSig"
        :=
          ( "keys" := I (Array PubKeyHash)
              :+ "minSigs"
              := I BigInt
              :+ PNil
          )
        @@ Z
        :+ PNil
    )

instance ToData MultiSig where
  toData = genericToData

instance FromData MultiSig where
  fromData = genericFromData

instance DecodeAeson MultiSig where
  decodeAeson x = wrap <$> decodeAeson x

instance EncodeAeson MultiSig where
   encodeAeson (MultiSig x) = encodeAeson x

derive instance Generic MultiSig _

derive instance Newtype MultiSig _

derive newtype instance Eq MultiSig

derive newtype instance Show MultiSig

--------------------------------------------------------------------------------

_MultiSig :: Iso' MultiSig { keys :: Array PubKeyHash, minSigs :: BigInt }
_MultiSig = _Newtype
